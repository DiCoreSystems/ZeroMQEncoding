// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRING_CAPNZERO_H_
#define FLATBUFFERS_GENERATED_STRING_CAPNZERO_H_

#include "flatbuffers/flatbuffers.h"

namespace capnzero {

struct Text;
struct TextBuilder;

inline const flatbuffers::TypeTable *TextTypeTable();

struct Text FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TextBuilder Builder;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return TextTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXT = 4
  };
  const flatbuffers::String *text() const {
    return GetPointer<const flatbuffers::String *>(VT_TEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXT) &&
           verifier.VerifyString(text()) &&
           verifier.EndTable();
  }
};

struct TextBuilder {
  typedef Text Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_text(flatbuffers::Offset<flatbuffers::String> text) {
    fbb_.AddOffset(Text::VT_TEXT, text);
  }
  explicit TextBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TextBuilder &operator=(const TextBuilder &);
  flatbuffers::Offset<Text> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Text>(end);
    return o;
  }
};

inline flatbuffers::Offset<Text> CreateText(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> text = 0) {
  TextBuilder builder_(_fbb);
  builder_.add_text(text);
  return builder_.Finish();
}

inline flatbuffers::Offset<Text> CreateTextDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *text = nullptr) {
  auto text__ = text ? _fbb.CreateString(text) : 0;
  return capnzero::CreateText(
      _fbb,
      text__);
}

inline const flatbuffers::TypeTable *TextTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "text"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const capnzero::Text *GetText(const void *buf) {
  return flatbuffers::GetRoot<capnzero::Text>(buf);
}

inline const capnzero::Text *GetSizePrefixedText(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<capnzero::Text>(buf);
}

inline bool VerifyTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<capnzero::Text>(nullptr);
}

inline bool VerifySizePrefixedTextBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<capnzero::Text>(nullptr);
}

inline void FinishTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<capnzero::Text> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTextBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<capnzero::Text> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace capnzero

#endif  // FLATBUFFERS_GENERATED_STRING_CAPNZERO_H_
