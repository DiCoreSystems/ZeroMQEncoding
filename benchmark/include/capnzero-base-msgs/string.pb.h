// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: string.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_string_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_string_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_string_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_string_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_string_2eproto;
namespace capnzero {
class MessageProtobuf;
class MessageProtobufDefaultTypeInternal;
extern MessageProtobufDefaultTypeInternal _MessageProtobuf_default_instance_;
}  // namespace capnzero
PROTOBUF_NAMESPACE_OPEN
template<> ::capnzero::MessageProtobuf* Arena::CreateMaybeMessage<::capnzero::MessageProtobuf>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace capnzero {

// ===================================================================

class MessageProtobuf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:capnzero.MessageProtobuf) */ {
 public:
  MessageProtobuf();
  virtual ~MessageProtobuf();

  MessageProtobuf(const MessageProtobuf& from);
  MessageProtobuf(MessageProtobuf&& from) noexcept
    : MessageProtobuf() {
    *this = ::std::move(from);
  }

  inline MessageProtobuf& operator=(const MessageProtobuf& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageProtobuf& operator=(MessageProtobuf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageProtobuf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageProtobuf* internal_default_instance() {
    return reinterpret_cast<const MessageProtobuf*>(
               &_MessageProtobuf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageProtobuf& a, MessageProtobuf& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageProtobuf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageProtobuf* New() const final {
    return CreateMaybeMessage<MessageProtobuf>(nullptr);
  }

  MessageProtobuf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageProtobuf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageProtobuf& from);
  void MergeFrom(const MessageProtobuf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageProtobuf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "capnzero.MessageProtobuf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_string_2eproto);
    return ::descriptor_table_string_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatesFieldNumber = 4,
    kIdFieldNumber = 1,
    kMessageInfoFieldNumber = 3,
    kStatusFieldNumber = 2,
  };
  // repeated int64 states = 4;
  int states_size() const;
  private:
  int _internal_states_size() const;
  public:
  void clear_states();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_states(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_states() const;
  void _internal_add_states(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_states();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 states(int index) const;
  void set_states(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_states(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      states() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_states();

  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string messageInfo = 3;
  bool has_messageinfo() const;
  private:
  bool _internal_has_messageinfo() const;
  public:
  void clear_messageinfo();
  const std::string& messageinfo() const;
  void set_messageinfo(const std::string& value);
  void set_messageinfo(std::string&& value);
  void set_messageinfo(const char* value);
  void set_messageinfo(const char* value, size_t size);
  std::string* mutable_messageinfo();
  std::string* release_messageinfo();
  void set_allocated_messageinfo(std::string* messageinfo);
  private:
  const std::string& _internal_messageinfo() const;
  void _internal_set_messageinfo(const std::string& value);
  std::string* _internal_mutable_messageinfo();
  public:

  // required int64 status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int64 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:capnzero.MessageProtobuf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > states_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageinfo_;
  ::PROTOBUF_NAMESPACE_ID::int64 status_;
  friend struct ::TableStruct_string_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageProtobuf

// required string id = 1;
inline bool MessageProtobuf::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageProtobuf::has_id() const {
  return _internal_has_id();
}
inline void MessageProtobuf::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageProtobuf::id() const {
  // @@protoc_insertion_point(field_get:capnzero.MessageProtobuf.id)
  return _internal_id();
}
inline void MessageProtobuf::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:capnzero.MessageProtobuf.id)
}
inline std::string* MessageProtobuf::mutable_id() {
  // @@protoc_insertion_point(field_mutable:capnzero.MessageProtobuf.id)
  return _internal_mutable_id();
}
inline const std::string& MessageProtobuf::_internal_id() const {
  return id_.GetNoArena();
}
inline void MessageProtobuf::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageProtobuf::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:capnzero.MessageProtobuf.id)
}
inline void MessageProtobuf::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:capnzero.MessageProtobuf.id)
}
inline void MessageProtobuf::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:capnzero.MessageProtobuf.id)
}
inline std::string* MessageProtobuf::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageProtobuf::release_id() {
  // @@protoc_insertion_point(field_release:capnzero.MessageProtobuf.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageProtobuf::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:capnzero.MessageProtobuf.id)
}

// required int64 status = 2;
inline bool MessageProtobuf::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MessageProtobuf::has_status() const {
  return _internal_has_status();
}
inline void MessageProtobuf::clear_status() {
  status_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageProtobuf::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageProtobuf::status() const {
  // @@protoc_insertion_point(field_get:capnzero.MessageProtobuf.status)
  return _internal_status();
}
inline void MessageProtobuf::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void MessageProtobuf::set_status(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:capnzero.MessageProtobuf.status)
}

// required string messageInfo = 3;
inline bool MessageProtobuf::_internal_has_messageinfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MessageProtobuf::has_messageinfo() const {
  return _internal_has_messageinfo();
}
inline void MessageProtobuf::clear_messageinfo() {
  messageinfo_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MessageProtobuf::messageinfo() const {
  // @@protoc_insertion_point(field_get:capnzero.MessageProtobuf.messageInfo)
  return _internal_messageinfo();
}
inline void MessageProtobuf::set_messageinfo(const std::string& value) {
  _internal_set_messageinfo(value);
  // @@protoc_insertion_point(field_set:capnzero.MessageProtobuf.messageInfo)
}
inline std::string* MessageProtobuf::mutable_messageinfo() {
  // @@protoc_insertion_point(field_mutable:capnzero.MessageProtobuf.messageInfo)
  return _internal_mutable_messageinfo();
}
inline const std::string& MessageProtobuf::_internal_messageinfo() const {
  return messageinfo_.GetNoArena();
}
inline void MessageProtobuf::_internal_set_messageinfo(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  messageinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageProtobuf::set_messageinfo(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  messageinfo_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:capnzero.MessageProtobuf.messageInfo)
}
inline void MessageProtobuf::set_messageinfo(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  messageinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:capnzero.MessageProtobuf.messageInfo)
}
inline void MessageProtobuf::set_messageinfo(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  messageinfo_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:capnzero.MessageProtobuf.messageInfo)
}
inline std::string* MessageProtobuf::_internal_mutable_messageinfo() {
  _has_bits_[0] |= 0x00000002u;
  return messageinfo_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageProtobuf::release_messageinfo() {
  // @@protoc_insertion_point(field_release:capnzero.MessageProtobuf.messageInfo)
  if (!_internal_has_messageinfo()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return messageinfo_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageProtobuf::set_allocated_messageinfo(std::string* messageinfo) {
  if (messageinfo != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  messageinfo_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), messageinfo);
  // @@protoc_insertion_point(field_set_allocated:capnzero.MessageProtobuf.messageInfo)
}

// repeated int64 states = 4;
inline int MessageProtobuf::_internal_states_size() const {
  return states_.size();
}
inline int MessageProtobuf::states_size() const {
  return _internal_states_size();
}
inline void MessageProtobuf::clear_states() {
  states_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageProtobuf::_internal_states(int index) const {
  return states_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageProtobuf::states(int index) const {
  // @@protoc_insertion_point(field_get:capnzero.MessageProtobuf.states)
  return _internal_states(index);
}
inline void MessageProtobuf::set_states(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  states_.Set(index, value);
  // @@protoc_insertion_point(field_set:capnzero.MessageProtobuf.states)
}
inline void MessageProtobuf::_internal_add_states(::PROTOBUF_NAMESPACE_ID::int64 value) {
  states_.Add(value);
}
inline void MessageProtobuf::add_states(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_states(value);
  // @@protoc_insertion_point(field_add:capnzero.MessageProtobuf.states)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MessageProtobuf::_internal_states() const {
  return states_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
MessageProtobuf::states() const {
  // @@protoc_insertion_point(field_list:capnzero.MessageProtobuf.states)
  return _internal_states();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MessageProtobuf::_internal_mutable_states() {
  return &states_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
MessageProtobuf::mutable_states() {
  // @@protoc_insertion_point(field_mutable_list:capnzero.MessageProtobuf.states)
  return _internal_mutable_states();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace capnzero

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_string_2eproto
